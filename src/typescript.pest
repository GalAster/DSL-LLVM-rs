program = _{SOI~statement* ~ EOI}
statement = _{
             EmptyStatement
             | DeclareStatement ~eos?
             | data ~ eos?
             }
/*====================================================================================================================*/
EmptyStatement = {eos}
eos = {Semicolon}
comma_or_semi = _{Comma|Semicolon}
Semicolon = @{";"}
Comma = @{","}
/*====================================================================================================================*/
//!#C678DD: VariableKind
DeclareStatement = {VariableKind ~ TypeHinted ~ Set ~ expr}
VariableKind = @{Let|Var|Const}
Let = @{"Let"}
Var = @{"var"}
Const = @{"const"}
/*====================================================================================================================*/
FunctionStatement = {Def~ SYMBOL ~ Set ~ "{"~ expr ~"}"}
Def = @{"function"}
/*====================================================================================================================*/
/*====================================================================================================================*/
expr = !{
        term ~ (!NEWLINE~ slice)
        | trinoculars
        | term ~ (Infix ~ term)*
        }
term =  { Prefix* ~ node ~ Postfix* }
node = _{  data| "(" ~ expr ~ ")" }
condition  = { node|expr}
expressions = {"("~expr~ ( comma_or_semi? ~ expr)* ~comma_or_semi?~")"}
trinoculars = _{if_trinocular}
/*====================================================================================================================*/
TypeHinted = {SYMBOL~(Colon~TypeExpression)?}
TypeExpression = {""}
/*====================================================================================================================*/
data = {dict|list|Null|Undefined|Boolean|Byte|Number| String |SYMBOL}
dict = {"{" ~key_value? ~(Comma ~key_value)* ~Comma? ~"}"}
list = {"[" ~element? ~(Comma ~element)* ~Comma? ~"]"}
slice = {"[" ~index ~(Comma ~index)* ~Comma? ~"]"}
index = {index_step|index_range|index_element}
key_value = !{key_valid ~ Colon ~element}
key_valid = !{Integer | SYMBOL | String}
element = !{data | expr | statement}
index_element = !{element}
index_range = !{element? ~ Colon ~ element?}
index_step = !{element? ~ Colon ~ element?~ Colon ~ element?}
/*====================================================================================================================*/
//!#D19A66: True|False
Boolean = !{ True|False }
True = @{"true"}
False = @{"false"}
/*====================================================================================================================*/
//!#D19A66: Null|Undefined
Null = @{"null"}
Undefined = @{"undefined"}
/*====================================================================================================================*/
///#E5C07B
SYMBOL = @{NameStartCharacter~ NameCharacter*}
NameCharacter = _{ASCII_DIGIT|NameStartCharacter}
NameStartCharacter = _{Dollar|Underline|ASCII_ALPHA}
Underline = @{"_"}
Dollar = @{"$"}
/*====================================================================================================================*/
//!#D19A66: Byte_BIN|Byte_OCT|Byte_HEX
Byte = _{Byte_BIN|Byte_OCT|Byte_HEX}
Byte_BIN = ${ Zero ~ B ~ (Underline? ~ ASCII_BIN_DIGIT)+ }
Byte_OCT = ${ Zero ~ O ~ (Underline? ~ ASCII_OCT_DIGIT)+ }
Byte_HEX = ${ Zero ~ X ~ (Underline? ~ ASCII_HEX_DIGIT)+ }
Zero = _{"0"}
B = _{"B"|"b"}
O = _{"O"|"o"}
X = _{"X"|"x"}
/*====================================================================================================================*/
//!#D19A66: Integer|Decimal|DecimalBad|Exponent
Number = _{Exponent|Decimal|DecimalBad|Integer}
Decimal = ${Integer ~Dot~ ASCII_DIGIT+}
DecimalBad = ${Integer~Dot|Dot~ASCII_DIGIT+}
Exponent = ${(Decimal|Integer) ~E~ (Decimal|Integer)}
Integer = @{ASCII_DIGIT ~ (Underline? ~ ASCII_DIGIT)*}
Dot = @{"."}
E = _{"E"|"e"}
/*====================================================================================================================*/
//!#98C379: DoubleEscape|SingleEscape
String = _{SingleEscape|DoubleEscape} //TODO: 字符串表达式
DoubleEscape = ${ S2 ~ (!S2~ ANY)* ~ S2 }
SingleEscape = ${ S1 ~ (!S1~ ANY)* ~ S1 }
S1 = _{"'"}
S2 = _{"\""}
/*====================================================================================================================*/
WHITESPACE = _{NEWLINE|SPACE_SEPARATOR}
SPACE_SEPARATOR = {" "|"\t"}
NEWLINE = @{CR ~ LF|CR|LF}
CR = @{"\r"}
LF = @{"\n"}
/*====================================================================================================================*/
//!#56B6C2: Prefix|Infix|Postfix
Prefix = @{Plus|Increase|Decrease}
Postfix = @{"!"}
Infix = @{o_add|o_times}

Or = @{"|"}
LazyOr = @{"||"}
Set = @{"="}
Colon = @{":"}
Star = @{"*"}
Slash = @{"/"}
Proportion = @{"::"|"∷"}//U+2237
Separate = @{";;"}
Question = @{"?"}

Import = @{"<<<"|"⋘"} //U+22D8
Export = @{">>>"|"⋙"}    //U+22D9
LeftShift = @{"<<"|"≪"}  //U+226A
RightShift = @{">>"|"≫"}   //U+226B
LessEqual = @{"<="}
GraterEqual = @{">="}
Less = @{"<"}
Grater = @{">"}

Equivalent = @{"==="}
NotEquivalent = @{"=!="}
Equal = @{"=="}
NotEqual = @{"!="|"≠"} //U+2260

o_add = _{Plus|Minus}
Plus = @{"+"}
Minus = @{"-"}
o_times = _{Multiply|CenterDot|Divide|Quotient |Modulo  }
Multiply = @{Star | "×"}  //U+00D7
CenterDot = @{"⋅"}   //U+22C5
Divide = @{Slash | "÷"}  //U+00F7
Quotient = @{"//"}
Modulo = @{"%"}

o_power = _{ Power  }
Power = @{"^"}

Increase = @{"++"}
Decrease = @{"--"}
To = @{"->"}
Quote = @{"`"}
Acute = @{"´"} // U+00B4

LogicOr = @{"||"|"∧"}   //U+2227
LogicAnd = @{"&&"|"∨"}   //U+2228
LogicNot = @{"¬"}   //U+00AC

Ellipsis = @{"..."|"…"} // U+2026
